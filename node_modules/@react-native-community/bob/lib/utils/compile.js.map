{"version":3,"sources":["../../src/utils/compile.ts"],"names":["compile","root","source","output","options","flow","report","files","glob","sync","cwd","absolute","nodir","ignore","info","chalk","blue","String","length","path","relative","Promise","all","map","filepath","outputFilename","join","replace","fs","mkdirp","dirname","test","copy","content","readFile","result","babel","transformAsync","babelrc","configFile","sourceMaps","filename","Error","code","mapFilename","basename","writeFileSync","JSON","stringify","writeFile","success"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAQe,eAAeA,OAAf,CAAuB;AACpCC,EAAAA,IADoC;AAEpCC,EAAAA,MAFoC;AAGpCC,EAAAA,MAHoC;AAIpCC,EAAAA,OAJoC;AAKpCC,EAAAA,IALoC;AAMpCC,EAAAA;AANoC,CAAvB,EAOH;AACV,QAAMC,KAAK,GAAGC,cAAKC,IAAL,CAAU,MAAV,EAAkB;AAC9BC,IAAAA,GAAG,EAAER,MADyB;AAE9BS,IAAAA,QAAQ,EAAE,IAFoB;AAG9BC,IAAAA,KAAK,EAAE,IAHuB;AAI9BC,IAAAA,MAAM,EAAE;AAJsB,GAAlB,CAAd;;AAOAP,EAAAA,MAAM,CAACQ,IAAP,CACG,aAAYC,eAAMC,IAAN,CAAWC,MAAM,CAACV,KAAK,CAACW,MAAP,CAAjB,CAAiC,aAAYH,eAAMC,IAAN,CACxDG,cAAKC,QAAL,CAAcnB,IAAd,EAAoBC,MAApB,CADwD,CAExD,SAAQa,eAAMC,IAAN,CAAW,OAAX,CAAoB,EAHhC;AAMA,QAAMK,OAAO,CAACC,GAAR,CACJf,KAAK,CAACgB,GAAN,CAAU,MAAMC,QAAN,IAAkB;AAC1B,UAAMC,cAAc,GAAGN,cACpBO,IADoB,CACfvB,MADe,EACPgB,cAAKC,QAAL,CAAclB,MAAd,EAAsBsB,QAAtB,CADO,EAEpBG,OAFoB,CAEZ,cAFY,EAEI,KAFJ,CAAvB;;AAIA,UAAMC,iBAAGC,MAAH,CAAUV,cAAKW,OAAL,CAAaL,cAAb,CAAV,CAAN;;AAEA,QAAI,CAAC,eAAeM,IAAf,CAAoBP,QAApB,CAAL,EAAoC;AAClC;AACAI,uBAAGI,IAAH,CAAQR,QAAR,EAAkBC,cAAlB;;AACA;AACD;;AAED,UAAMQ,OAAO,GAAG,MAAML,iBAAGM,QAAH,CAAYV,QAAZ,EAAsB,OAAtB,CAAtB;AACA,UAAMW,MAAM,GAAG,MAAMC,KAAK,CAACC,cAAN,CAAqBJ,OAArB;AACnBK,MAAAA,OAAO,EAAE,KADU;AAEnBC,MAAAA,UAAU,EAAE,KAFO;AAGnBC,MAAAA,UAAU,EAAE,IAHO;AAInBC,MAAAA,QAAQ,EAAEjB;AAJS,OAKhBpB,OALgB,EAArB;;AAQA,QAAI+B,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAM,IAAIO,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAGR,MAAM,CAACQ,IAAlB;;AAEA,QAAIR,MAAM,CAACZ,GAAX,EAAgB;AACd,YAAMqB,WAAW,GAAGnB,cAAc,GAAG,MAArC;AACAkB,MAAAA,IAAI,IAAI,4BAA4BxB,cAAK0B,QAAL,CAAcD,WAAd,CAApC;;AAEAhB,uBAAGkB,aAAH,CAAiBF,WAAjB,EAA8BG,IAAI,CAACC,SAAL,CAAeb,MAAM,CAACZ,GAAtB,CAA9B;AACD;;AAED,UAAMK,iBAAGqB,SAAH,CAAaxB,cAAb,EAA6BkB,IAA7B,CAAN;;AAEA,QAAItC,IAAJ,EAAU;AACRuB,uBAAGI,IAAH,CAAQR,QAAR,EAAkBC,cAAc,GAAG,OAAnC;AACD;AACF,GAxCD,CADI,CAAN;AA4CAnB,EAAAA,MAAM,CAAC4C,OAAP,CAAgB,kBAAiBnC,eAAMC,IAAN,CAAWG,cAAKC,QAAL,CAAcnB,IAAd,EAAoBE,MAApB,CAAX,CAAwC,EAAzE;AACD","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport * as babel from '@babel/core';\nimport glob from 'glob';\nimport { Input } from '../types';\n\ntype Options = Input & {\n  options: babel.TransformOptions;\n  flow: boolean;\n};\n\nexport default async function compile({\n  root,\n  source,\n  output,\n  options,\n  flow,\n  report,\n}: Options) {\n  const files = glob.sync('**/*', {\n    cwd: source,\n    absolute: true,\n    nodir: true,\n    ignore: '**/__tests__/**,**/__fixtures__/**',\n  });\n\n  report.info(\n    `Compiling ${chalk.blue(String(files.length))} files in ${chalk.blue(\n      path.relative(root, source)\n    )} with ${chalk.blue('babel')}`\n  );\n\n  await Promise.all(\n    files.map(async filepath => {\n      const outputFilename = path\n        .join(output, path.relative(source, filepath))\n        .replace(/\\.(js|tsx?)$/, '.js');\n\n      await fs.mkdirp(path.dirname(outputFilename));\n\n      if (!/\\.(js|tsx?)$/.test(filepath)) {\n        // Copy files which aren't source code\n        fs.copy(filepath, outputFilename);\n        return;\n      }\n\n      const content = await fs.readFile(filepath, 'utf-8');\n      const result = await babel.transformAsync(content, {\n        babelrc: false,\n        configFile: false,\n        sourceMaps: true,\n        filename: filepath,\n        ...options,\n      });\n\n      if (result == null) {\n        throw new Error('Output code was null');\n      }\n\n      let code = result.code;\n\n      if (result.map) {\n        const mapFilename = outputFilename + '.map';\n        code += '\\n//# sourceMappingURL=' + path.basename(mapFilename);\n\n        fs.writeFileSync(mapFilename, JSON.stringify(result.map));\n      }\n\n      await fs.writeFile(outputFilename, code);\n\n      if (flow) {\n        fs.copy(filepath, outputFilename + '.flow');\n      }\n    })\n  );\n\n  report.success(`Wrote files to ${chalk.blue(path.relative(root, output))}`);\n}\n"],"file":"compile.js"}