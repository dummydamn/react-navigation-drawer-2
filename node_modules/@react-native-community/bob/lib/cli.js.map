{"version":3,"sources":["../src/cli.ts"],"names":["name","require","root","process","cwd","explorer","yargs","command","pak","path","join","shouldContinue","inquirer","prompt","type","message","default","exit","fs","pathExists","logger","source","validate","input","Boolean","entryFile","pkg","JSON","parse","readFile","output","targets","flow","choices","length","Object","keys","devDependencies","includes","target","undefined","entries","main","module","types","prepare","files","key","entry","replace","scripts","stringify","slice","sort","map","t","writeFile","gitignore","content","split","success","argv","result","searchSync","config","$0","options","relative","filepath","report","info","warn","error","targetName","Array","isArray","targetOptions","chalk","blue","resolve","strict"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport yargs from 'yargs';\nimport inquirer from 'inquirer';\nimport cosmiconfig from 'cosmiconfig';\nimport isGitDirty from 'is-git-dirty';\nimport * as logger from './utils/logger';\nimport buildCommonJS from './targets/commonjs';\nimport buildModule from './targets/module';\nimport buildTypescript from './targets/typescript';\nimport { Options } from './types';\n\nconst { name } = require('../package.json');\nconst root = process.cwd();\nconst explorer = cosmiconfig(name);\n\nyargs\n  .command('init', 'configure the package to use bob', {}, async () => {\n    const pak = path.join(root, 'package.json');\n\n    if (isGitDirty()) {\n      const { shouldContinue } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'shouldContinue',\n        message: `The working directory is not clean. You should commit or stash your changes before configuring bob. Continue anyway?`,\n        default: false,\n      });\n\n      if (!shouldContinue) {\n        process.exit(1);\n      }\n    }\n\n    if (!(await fs.pathExists(pak))) {\n      logger.exit(\n        `Couldn't find a 'package.json' file in '${root}'. Are you in a project folder?`\n      );\n    }\n\n    const { source } = await inquirer.prompt({\n      type: 'input',\n      name: 'source',\n      message: 'Where are your source files?',\n      default: 'src',\n      validate: input => Boolean(input),\n    });\n\n    let entryFile;\n\n    if (await fs.pathExists(path.join(root, source, 'index.js'))) {\n      entryFile = 'index.js';\n    } else if (await fs.pathExists(path.join(root, source, 'index.ts'))) {\n      entryFile = 'index.ts';\n    } else if (await fs.pathExists(path.join(root, source, 'index.tsx'))) {\n      entryFile = 'index.tsx';\n    }\n\n    if (!entryFile) {\n      logger.exit(\n        `Couldn't find a 'index.js'. 'index.ts' or 'index.tsx' file under '${source}'. Please re-run the CLI after creating it.`\n      );\n      return;\n    }\n\n    const pkg = JSON.parse(await fs.readFile(pak, 'utf-8'));\n    const { output, targets, flow } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'output',\n        message: 'Where do you want to generate the output files?',\n        default: 'lib',\n        validate: input => Boolean(input),\n      },\n      {\n        type: 'checkbox',\n        name: 'targets',\n        message: 'Which targets do you want to build?',\n        choices: ['commonjs', 'module', 'typescript'],\n        validate: input => Boolean(input.length),\n      },\n      {\n        type: 'confirm',\n        name: 'flow',\n        message: 'Do you want to publish definitions for flow?',\n        default: Object.keys(pkg.devDependencies || {}).includes('flow-bin'),\n      },\n    ]);\n\n    const target =\n      targets[0] === 'commonjs' || targets[0] === 'module'\n        ? targets[0]\n        : undefined;\n\n    const entries: { [key: string]: string } = {\n      main: target\n        ? path.join(output, target, 'index.js')\n        : path.join(source, entryFile),\n      'react-native': path.join(source, entryFile),\n    };\n\n    if (targets.includes('module')) {\n      entries.module = path.join(output, 'module', 'index.js');\n    }\n\n    if (targets.includes('typescript')) {\n      entries.types = path.join(output, 'typescript', source, 'index.d.ts');\n    }\n\n    const prepare = 'bob build';\n    const files = [source, output];\n\n    for (const key in entries) {\n      const entry = entries[key];\n\n      if (pkg[key] && pkg[key] !== entry) {\n        const { replace } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'replace',\n          message: `Your package.json has the '${key}' field set to '${\n            pkg[key]\n          }'. Do you want to replace it with '${entry}'?`,\n          default: true,\n        });\n\n        if (replace) {\n          pkg[key] = entry;\n        }\n      } else {\n        pkg[key] = entry;\n      }\n    }\n\n    if (pkg.scripts && pkg.scripts.prepare && pkg.scripts.prepare !== prepare) {\n      const { replace } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'replace',\n        message: `Your package.json has the 'scripts.prepare' field set to '${\n          pkg.scripts.prepare\n        }'. Do you want to replace it with '${prepare}'?`,\n        default: true,\n      });\n\n      if (replace) {\n        pkg.scripts.prepare = prepare;\n      }\n    } else {\n      pkg.scripts = pkg.scripts || {};\n      pkg.scripts.prepare = prepare;\n    }\n\n    if (\n      pkg.files &&\n      JSON.stringify(pkg.files.slice().sort()) !==\n        JSON.stringify(files.slice().sort())\n    ) {\n      const { replace } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'replace',\n        message: `Your package.json already has a 'files' field. Do you want to replace it?`,\n        default: true,\n      });\n\n      if (replace) {\n        pkg.files = files;\n      }\n    } else {\n      pkg.files = files;\n    }\n\n    pkg[name] = {\n      source,\n      output,\n      targets: targets.map((t: string) => {\n        if (t === target && flow) {\n          return [t, { flow }];\n        }\n\n        return t;\n      }),\n    };\n\n    await fs.writeFile(pak, JSON.stringify(pkg, null, 2));\n\n    const gitignore = path.join(root, '.gitignore');\n\n    if (await fs.pathExists(gitignore)) {\n      const content = await fs.readFile(gitignore, 'utf-8');\n\n      if (!content.split('\\n').includes(`${output}/`)) {\n        await fs.writeFile(\n          gitignore,\n          `${content}\\n# generated by bob\\n${output}/\\n`\n        );\n      }\n    }\n\n    logger.success('Your project is configured!');\n  })\n  .command('build', 'build files for publishing', {}, async argv => {\n    const result = explorer.searchSync();\n\n    if (!(result && result.config)) {\n      logger.exit(\n        `No configuration found. Run '${\n          argv.$0\n        } init' to create one automatically.`\n      );\n    }\n\n    const options: Options = result!.config;\n\n    if (!(options.targets && options.targets.length)) {\n      logger.exit(\n        `No targets found in the configuration in '${path.relative(\n          root,\n          result!.filepath\n        )}'.`\n      );\n    }\n\n    const source = options.source;\n\n    if (!source) {\n      logger.exit(\n        `No source option found in the configuration in '${path.relative(\n          root,\n          result!.filepath\n        )}'.`\n      );\n    }\n\n    const output = options.output;\n\n    if (!output) {\n      logger.exit(\n        `No source option found in the configuration in '${path.relative(\n          root,\n          result!.filepath\n        )}'.`\n      );\n    }\n\n    const report = {\n      info: logger.info,\n      warn: logger.warn,\n      error: logger.error,\n      success: logger.success,\n    };\n\n    for (const target of options.targets!) {\n      const targetName = Array.isArray(target) ? target[0] : target;\n      const targetOptions = Array.isArray(target) ? target[1] : undefined;\n\n      report.info(`Building target ${chalk.blue(targetName)}`);\n\n      switch (targetName) {\n        case 'commonjs':\n          await buildCommonJS({\n            root,\n            source: path.resolve(root, source as string),\n            output: path.resolve(root, output as string, 'commonjs'),\n            options: targetOptions,\n            report,\n          });\n          break;\n        case 'module':\n          await buildModule({\n            root,\n            source: path.resolve(root, source as string),\n            output: path.resolve(root, output as string, 'module'),\n            options: targetOptions,\n            report,\n          });\n          break;\n        case 'typescript':\n          await buildTypescript({\n            root,\n            source: path.resolve(root, source as string),\n            output: path.resolve(root, output as string, 'typescript'),\n            report,\n          });\n          break;\n        default:\n          logger.exit(`Invalid target ${chalk.blue(targetName)}.`);\n      }\n    }\n  })\n  .strict().argv;\n"],"file":"cli.js"}