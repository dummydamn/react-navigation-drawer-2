{"version":3,"names":["Clock","Animated","Value","onChange","clockRunning","startClock","stopClock","interpolateNode","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","clock","isDrawerTypeFront","props","drawerType","isOpen","open","nextIsOpen","isSwiping","gestureState","State","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","drawerPosition","touchDistanceFromDrawer","swipeDistanceThreshold","undefined","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","toggleDrawer","dragX","onOpen","onClose","pendingOpenValue","forceUpdate","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleTapStateChange","oldState","handleContainerLayout","e","setValue","layout","width","handleDrawerLayout","requestAnimationFrame","hidden","hideStatusBar","statusBarAnimation","StatusBar","setHidden","prevProps","gestureEnabled","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","left","styles","main","content","transform","overlay","opacity","inputRange","outputRange","zIndex","Platform","OS","container","React","PureComponent","defaultProps","drawerPostion","StyleSheet","create","backgroundColor","top","bottom","maxWidth","absoluteFillObject","flex","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolateNode,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: ReadonlyArray<Binary>) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolateNode(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":"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"}