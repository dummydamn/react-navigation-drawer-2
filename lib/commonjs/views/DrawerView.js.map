{"version":3,"names":["DrawerView","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","React","createRef","getLockMode","descriptors","activeKey","routes","key","drawerLockMode","options","handleDrawerOpen","dispatch","DrawerActions","openDrawer","handleDrawerClose","closeDrawer","updateWidth","setState","renderNavigationView","progress","screenProps","contentComponent","contentOptions","drawerPosition","style","renderContent","lazy","unmountInactiveRoutes","descriptor","getComponent","styles","content","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","setDrawerGestureRef","ref","current","Dimensions","addEventListener","prevProps","prevLockMode","nextLockMode","removeEventListener","drawerBackgroundColor","context","ThemeColors","bodyContent","overlayColor","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","getDrawerBackgroundColor","getOverlayColor","isDrawerOpen","backgroundColor","width","nextProps","prevState","PureComponent","contextType","ThemeContext","defaultProps","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    // If drawerLockMode was set to `locked-open`, we should open the drawer on mount\n    if (this.getLockMode(this.props) === 'locked-open') {\n      this.handleDrawerOpen();\n    }\n\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevLockMode = this.getLockMode(prevProps);\n    const nextLockMode = this.getLockMode(this.props);\n\n    if (prevLockMode !== nextLockMode) {\n      if (nextLockMode === 'locked-open') {\n        this.handleDrawerOpen();\n      } else {\n        this.handleDrawerClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private getLockMode = ({ navigation, descriptors }: Props) => {\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = descriptors[activeKey].options;\n\n    return drawerLockMode;\n  };\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        contentComponent={this.props.navigationConfig.contentComponent}\n        contentOptions={this.props.navigationConfig.contentOptions}\n        drawerPosition={this.props.navigationConfig.drawerPosition}\n        style={this.props.navigationConfig.style}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      return (\n        <ScreenContainer style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation, navigationConfig } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = navigationConfig;\n\n    const drawerLockMode = this.getLockMode(this.props);\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={navigation.state.isDrawerOpen}\n          gestureEnabled={\n            drawerLockMode !== 'locked-open' &&\n            drawerLockMode !== 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"}