{"version":3,"names":["HomeScreen","flex","React","Component","navigationOptions","navigation","title","state","params","user","gesturesEnabled","it","MyDrawerNavigator","createDrawerNavigator","Home","App","createAppContainer","rendered","render","toJSON","expect","toMatchInlineSnapshot"],"sources":["createDrawerNavigator.test.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { render } from 'react-native-testing-library';\nimport { createAppContainer } from 'react-navigation';\n\nimport createDrawerNavigator from '../createDrawerNavigator';\n\nclass HomeScreen extends React.Component {\n  static navigationOptions = ({ navigation }: any) => ({\n    title: `Welcome ${\n      navigation.state.params ? navigation.state.params.user : 'anonymous'\n    }`,\n    gesturesEnabled: true,\n  });\n\n  render() {\n    return <View style={{ flex: 1 }} />;\n  }\n}\n\nit('renders successfully', () => {\n  const MyDrawerNavigator = createDrawerNavigator({ Home: HomeScreen });\n  const App = createAppContainer(MyDrawerNavigator);\n  const rendered = render(<App />).toJSON();\n\n  expect(rendered).toMatchInlineSnapshot(`\n    <View\n      collapsable={false}\n      onGestureHandlerEvent={[Function]}\n      onGestureHandlerStateChange={[Function]}\n      onLayout={[Function]}\n      style={\n        Object {\n          \"flex\": 1,\n          \"overflow\": \"hidden\",\n        }\n      }\n    >\n      <View\n        importantForAccessibility=\"yes\"\n        style={\n          Object {\n            \"flex\": 1,\n            \"transform\": Array [\n              Object {\n                \"translateX\": 0,\n              },\n            ],\n          }\n        }\n      >\n        <View\n          style={\n            Object {\n              \"flex\": 1,\n            }\n          }\n        >\n          <View\n            collapsable={false}\n            pointerEvents=\"auto\"\n            removeClippedSubviews={false}\n            style={\n              Array [\n                Object {\n                  \"flex\": 1,\n                  \"overflow\": \"hidden\",\n                },\n                Array [\n                  Object {\n                    \"bottom\": 0,\n                    \"left\": 0,\n                    \"position\": \"absolute\",\n                    \"right\": 0,\n                    \"top\": 0,\n                  },\n                  Object {\n                    \"opacity\": 1,\n                  },\n                ],\n              ]\n            }\n          >\n            <View\n              style={\n                Object {\n                  \"flex\": 1,\n                }\n              }\n            >\n              <View\n                style={\n                  Object {\n                    \"flex\": 1,\n                  }\n                }\n              />\n            </View>\n          </View>\n        </View>\n        <View\n          collapsable={false}\n          onGestureHandlerEvent={[Function]}\n          onGestureHandlerStateChange={[Function]}\n          style={\n            Object {\n              \"backgroundColor\": \"rgba(0, 0, 0, 0.5)\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"opacity\": undefined,\n              \"position\": \"absolute\",\n              \"right\": 0,\n              \"top\": 0,\n              \"zIndex\": undefined,\n            }\n          }\n        />\n      </View>\n      <View\n        accessibilityViewIsModal={false}\n        onLayout={[Function]}\n        removeClippedSubviews={false}\n        style={\n          Object {\n            \"backgroundColor\": \"#fff\",\n            \"bottom\": 0,\n            \"left\": undefined,\n            \"maxWidth\": \"100%\",\n            \"opacity\": Object {},\n            \"position\": \"absolute\",\n            \"top\": 0,\n            \"transform\": Array [\n              Object {\n                \"translateX\": undefined,\n              },\n            ],\n            \"width\": 320,\n            \"zIndex\": 0,\n          }\n        }\n      >\n        <View\n          style={\n            Array [\n              Object {\n                \"flex\": 1,\n              },\n              undefined,\n            ]\n          }\n        >\n          <RCTScrollView\n            alwaysBounceVertical={false}\n          >\n            <View>\n              <View\n                onLayout={[Function]}\n                pointerEvents=\"box-none\"\n                style={\n                  Object {\n                    \"paddingBottom\": 0,\n                    \"paddingLeft\": 0,\n                    \"paddingRight\": 0,\n                    \"paddingTop\": 20,\n                  }\n                }\n              >\n                <View\n                  style={\n                    Array [\n                      Object {\n                        \"paddingVertical\": 4,\n                      },\n                      undefined,\n                    ]\n                  }\n                >\n                  <View\n                    accessibilityLabel=\"Welcome anonymous\"\n                    accessible={true}\n                    isTVSelectable={true}\n                    onResponderGrant={[Function]}\n                    onResponderMove={[Function]}\n                    onResponderRelease={[Function]}\n                    onResponderTerminate={[Function]}\n                    onResponderTerminationRequest={[Function]}\n                    onStartShouldSetResponder={[Function]}\n                    style={\n                      Object {\n                        \"opacity\": 1,\n                      }\n                    }\n                  >\n                    <View\n                      onLayout={[Function]}\n                      pointerEvents=\"box-none\"\n                      style={\n                        Object {\n                          \"alignItems\": \"center\",\n                          \"backgroundColor\": \"rgba(0, 0, 0, .04)\",\n                          \"flexDirection\": \"row\",\n                          \"paddingBottom\": 0,\n                          \"paddingLeft\": 0,\n                          \"paddingRight\": 0,\n                          \"paddingTop\": 0,\n                        }\n                      }\n                    >\n                      <Text\n                        style={\n                          Array [\n                            Object {\n                              \"fontWeight\": \"bold\",\n                              \"margin\": 16,\n                            },\n                            Object {\n                              \"color\": \"#2196f3\",\n                            },\n                            undefined,\n                            undefined,\n                          ]\n                        }\n                      >\n                        Welcome anonymous\n                      </Text>\n                    </View>\n                  </View>\n                </View>\n              </View>\n            </View>\n          </RCTScrollView>\n        </View>\n      </View>\n    </View>\n  `);\n});\n"],"mappings":"6iBAAA,oDACA,yCACA,uEACA,iDAEA,uFAA6D,u1DAEvDA,WAAU,uRAQd,iBAAS,CACP,MAAO,qBAAC,iBAAI,EAAC,KAAK,CAAE,CAAEC,IAAI,CAAE,CAAE,CAAE,iEAAG,CACrC,CAAC,wBAVsBC,KAAK,CAACC,SAAS,EAAlCH,UAAU,CACPI,iBAAiB,CAAG,kBAAGC,WAAU,MAAVA,UAAU,OAAa,CACnDC,KAAK,aACHD,UAAU,CAACE,KAAK,CAACC,MAAM,CAAGH,UAAU,CAACE,KAAK,CAACC,MAAM,CAACC,IAAI,CAAG,WAAW,CACpE,CACFC,eAAe,CAAE,IACnB,CAAC,EAAC,CAOJC,EAAE,CAAC,sBAAsB,CAAE,UAAM,CAC/B,GAAMC,kBAAiB,CAAG,GAAAC,8BAAqB,EAAC,CAAEC,IAAI,CAAEd,UAAW,CAAC,CAAC,CACrE,GAAMe,IAAG,CAAG,GAAAC,mCAAkB,EAACJ,iBAAiB,CAAC,CACjD,GAAMK,SAAQ,CAAG,GAAAC,iCAAM,EAAC,oBAAC,GAAG,kEAAG,CAAC,CAACC,MAAM,EAAE,CAEzCC,MAAM,CAACH,QAAQ,CAAC,CAACI,qBAAqB,s5LAiNpC,CACJ,CAAC,CAAC"}