{"version":3,"names":["React","StyleSheet","I18nManager","Platform","Keyboard","StatusBar","PanGestureHandler","TapGestureHandler","State","Animated","DrawerProgressContext","Clock","Value","onChange","clockRunning","startClock","stopClock","interpolateNode","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","clock","isDrawerTypeFront","props","drawerType","isOpen","open","nextIsOpen","isSwiping","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","drawerPosition","touchDistanceFromDrawer","swipeDistanceThreshold","undefined","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","toggleDrawer","dragX","onOpen","onClose","pendingOpenValue","forceUpdate","keyboardDismissMode","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleTapStateChange","oldState","handleContainerLayout","e","setValue","layout","width","handleDrawerLayout","requestAnimationFrame","hidden","hideStatusBar","statusBarAnimation","setHidden","prevProps","gestureEnabled","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","left","styles","main","content","transform","overlay","opacity","inputRange","outputRange","zIndex","OS","container","PureComponent","defaultProps","drawerPostion","create","backgroundColor","top","bottom","maxWidth","absoluteFillObject","flex","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolateNode,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: ReadonlyArray<Binary>) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: ReadonlyArray<Binary>) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolateNode(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":"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"}