{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import {\n  NavigationScreenProp,\n  NavigationState,\n  NavigationRoute,\n  NavigationParams,\n  NavigationDescriptor,\n  SupportedThemes,\n  NavigationScreenConfig,\n} from 'react-navigation';\nimport { StyleProp, ViewStyle, TextStyle } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nexport type Scene = {\n  route: NavigationRoute;\n  index: number;\n  focused: boolean;\n  tintColor?: string;\n};\n\nexport type NavigationDrawerState = NavigationState & {\n  isDrawerOpen: boolean;\n};\n\nexport type NavigationDrawerProp<\n  State = NavigationRoute,\n  Params = NavigationParams\n> = NavigationScreenProp<State, Params> & {\n  openDrawer: () => void;\n  closeDrawer: () => void;\n  toggleDrawer: () => void;\n  jumpTo: (routeName: string, key?: string) => void;\n};\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerIconProps = {\n  tintColor?: string;\n  focused: boolean;\n};\n\nexport type DrawerLabelProps = {\n  tintColor?: string;\n  focused: boolean;\n};\n\nexport type NavigationDrawerOptions = {\n  title?: string;\n  drawerLabel?:\n    | React.ReactNode\n    | ((props: DrawerLabelProps) => React.ReactNode);\n  drawerIcon?: React.ReactNode | ((props: DrawerIconProps) => React.ReactNode);\n  drawerLockMode?: DrawerLockMode;\n};\n\nexport type NavigationDrawerConfig = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  edgeWidth?: number;\n  minSwipeDistance?: number;\n  drawerWidth?: number | (() => number);\n  drawerPosition?: 'left' | 'right';\n  drawerType?: 'front' | 'back' | 'slide';\n  drawerLockMode?: DrawerLockMode;\n  keyboardDismissMode?: 'none' | 'on-drag';\n  swipeEdgeWidth?: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold?: number;\n  hideStatusBar?: boolean;\n  statusBarAnimation?: 'slide' | 'none' | 'fade';\n  drawerBackgroundColor?: ThemedColor;\n  overlayColor?: ThemedColor;\n  screenContainerStyle?: StyleProp<ViewStyle>;\n};\n\nexport type NavigationDrawerRouterConfig = {\n  unmountInactiveRoutes?: boolean;\n  resetOnBlur?: boolean;\n  initialRouteName?: string;\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  backBehavior?: 'none' | 'initialRoute' | 'history';\n};\n\nexport type ThemedColor =\n  | string\n  | {\n      light: string;\n      dark: string;\n    };\n\nexport type DrawerNavigatorItemsProps = {\n  items: NavigationRoute[];\n  activeItemKey?: string | null;\n  activeTintColor?: string | ThemedColor;\n  activeBackgroundColor?: string | ThemedColor;\n  inactiveTintColor?: string | ThemedColor;\n  inactiveBackgroundColor?: string | ThemedColor;\n  getLabel: (scene: Scene) => React.ReactNode;\n  renderIcon: (scene: Scene) => React.ReactNode;\n  onItemPress: (scene: { route: NavigationRoute; focused: boolean }) => void;\n  itemsContainerStyle?: StyleProp<ViewStyle>;\n  itemStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  activeLabelStyle?: StyleProp<TextStyle>;\n  inactiveLabelStyle?: StyleProp<TextStyle>;\n  iconContainerStyle?: StyleProp<ViewStyle>;\n  drawerPosition: 'left' | 'right';\n  screenProps: unknown;\n};\n\nexport type DrawerContentComponentProps = DrawerNavigatorItemsProps & {\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  screenProps: unknown;\n};\n\nexport type NavigationDrawerScreenProps<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = {\n  theme: SupportedThemes;\n  navigation: NavigationDrawerProp<NavigationRoute, Params>;\n  screenProps: ScreenProps;\n};\n\nexport type NavigationDrawerScreenComponent<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = React.ComponentType<NavigationDrawerScreenProps<Params, ScreenProps>> & {\n  navigationOptions?: NavigationScreenConfig<\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, Params>,\n    ScreenProps\n  >;\n};\n\nexport type SceneDescriptorMap = {\n  [key: string]: NavigationDescriptor<\n    NavigationParams,\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  >;\n};\n"],"mappings":""}